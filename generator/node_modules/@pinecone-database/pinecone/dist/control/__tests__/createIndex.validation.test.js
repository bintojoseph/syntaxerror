"use strict";
// @ts-nocheck
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Disabling typescript in this file because the entire point is to catch
// cases where library callers (who may not be using typescript) pass
// incorrect argument values.
var createIndex_1 = require("../createIndex");
var errors_1 = require("../../errors");
describe('createIndex argument validations', function () {
    var IOA;
    beforeEach(function () {
        IOA = { createIndex: jest.fn() };
        jest.mock('../../pinecone-generated-ts-fetch', function () { return ({
            IndexOperationsApi: IOA,
        }); });
    });
    describe('required configurations', function () {
        test('should throw if index name is not provided', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)()];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError('The argument to createIndex had type errors: argument must be object.');
                return [2 /*return*/];
            });
        }); });
        test('should throw if index name is not a string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({ name: 12, dimension: 10 })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'name' must be string.");
                return [2 /*return*/];
            });
        }); });
        test('should throw if index name is empty string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({ name: '', dimension: 10 })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had validation errors: property 'name' must not be blank.");
                return [2 /*return*/];
            });
        }); });
        test('should throw if dimension is not provided', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({ name: 'index-name' })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError('The argument to createIndex must have required property: dimension.');
                return [2 /*return*/];
            });
        }); });
        test('should throw if dimension is not a number', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({ name: 'index-name', dimension: '10' })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'dimension' must be integer.");
                return [2 /*return*/];
            });
        }); });
        test('should throw if dimension is float', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({ name: 'index-name', dimension: 10.5 })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'dimension' must be integer.");
                return [2 /*return*/];
            });
        }); });
        test('should throw if dimension is not a positive integer', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({ name: 'index-name', dimension: -10 })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had validation errors: property 'dimension' must be >= 1.");
                return [2 /*return*/];
            });
        }); });
    });
    describe('optional configurations', function () {
        test('metric: should throw if not a string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    metric: 10,
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'metric' must be string.");
                return [2 /*return*/];
            });
        }); });
        test('metric: should throw if blank string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    metric: '',
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had validation errors: property 'metric' must not be blank.");
                return [2 /*return*/];
            });
        }); });
        test('replicas: should throw if not an integer', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    replicas: '10',
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'replicas' must be integer.");
                return [2 /*return*/];
            });
        }); });
        test('replicas: should throw if not a positive integer', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    replicas: -10,
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had validation errors: property 'replicas' must be >= 1.");
                return [2 /*return*/];
            });
        }); });
        test('podType: should throw if not a string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    podType: 10,
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'podType' must be string.");
                return [2 /*return*/];
            });
        }); });
        test('podType: should throw if not a valid pod type', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    podType: '',
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had validation errors: property 'podType' must not be blank.");
                return [2 /*return*/];
            });
        }); });
        test('pods: should throw if not an integer', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    pods: '10',
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'pods' must be integer.");
                return [2 /*return*/];
            });
        }); });
        test('pods: should throw if not a positive integer', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    pods: -10,
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had validation errors: property 'pods' must be >= 1.");
                return [2 /*return*/];
            });
        }); });
        test('metadataConfig: should throw if not an object', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    metadataConfig: '{}',
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'metadataConfig' must be object.");
                return [2 /*return*/];
            });
        }); });
        test('sourceCollection: should throw if not a string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    sourceCollection: 10,
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had type errors: property 'sourceCollection' must be string.");
                return [2 /*return*/];
            });
        }); });
        test('sourceCollection: should throw if blank string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var toThrow;
            return __generator(this, function (_a) {
                toThrow = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, createIndex_1.createIndex)(IOA)({
                                    name: 'index-name',
                                    dimension: 10,
                                    sourceCollection: '',
                                })];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                expect(toThrow).rejects.toThrowError(errors_1.PineconeArgumentError);
                expect(toThrow).rejects.toThrowError("The argument to createIndex had validation errors: property 'sourceCollection' must not be blank.");
                return [2 /*return*/];
            });
        }); });
    });
});
//# sourceMappingURL=createIndex.validation.test.js.map