import { IndexOperationsApi } from '../pinecone-generated-ts-fetch';
import type { IndexName, PodType } from './types';
/**
 * @see [Understanding indexes](https://docs.pinecone.io/docs/indexes)
 */
export type CreateIndexOptions = {
    /** The name of the index. Must be unique within the project and contain alphanumeric and hyphen characters. The name must start and end with alphanumeric characters. */
    name: IndexName;
    /** The dimension of the index. Must be a positive integer. The dimension of your index should match the output dimension of your embedding model. For example, if you are using a model that outputs 128-dimensional vectors, you should set the dimension to 128. */
    dimension: number;
    /**
     * The metric specifies how similarity is calculated in the index when querying. The default metric is `'cosine'`. Supported metrics include `'cosine'`, `'dotproduct'`, and `'euclidean'`. To learn more about these options, see [Distance metrics](https://docs.pinecone.io/docs/indexes#distance-metrics)
     *
     * @defaultValue `"cosine"`
     *
     * */
    metric?: 'cosine' | 'dotproduct' | 'euclidean' | string;
    /** The number of pods in the index. The default number of pods is 1. */
    pods?: number;
    /** The number of replicas in the index. The default number of replicas is 1. */
    replicas?: number;
    /**
     * The type of pod in the index. This string should combine a base pod type (`s1`, `p1`, or `p2`) with a size (`x1`, `x2`, `x4`, or `x8`) into a string such as `p1.x1` or `s1.x4`. The default pod type is `p1.x1`. For more information on these, see this guide on [pod types and sizes](https://docs.pinecone.io/docs/indexes#pods-pod-types-and-pod-sizes).
     *
     * @defaultValue `"p1.x1"`
     * */
    podType?: PodType;
    /** Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when a `metadataConfig` object is present, only metadata fields specified are indexed. */
    metadataConfig?: {
        /**
         * Specify an array of metadata fields you would like indexed.
         *
         * @see [Filtering with metadata](https://docs.pinecone.io/docs/metadata-filtering)
         * */
        indexed: Array<string>;
    };
    /** If creating an index from a collection, you can specify the name of the collection here. */
    sourceCollection?: string;
    /** This option tells the client not to resolve the returned promise until the index is ready to receive data. */
    waitUntilReady?: boolean;
    /** This option tells the client not to throw if you attempt to create an index that already exists. */
    suppressConflicts?: boolean;
};
export declare const createIndex: (api: IndexOperationsApi) => (options: CreateIndexOptions) => Promise<void>;
