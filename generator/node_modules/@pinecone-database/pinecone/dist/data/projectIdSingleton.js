"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectIdSingleton = void 0;
var errors_1 = require("../errors");
var utils_1 = require("../utils");
// We only ever want to call whoami a maximum of once per API key, even if there
// are multiple instantiations of the Index class. So we use a singleton here
// to cache projectIds by apiKey.
exports.ProjectIdSingleton = (function () {
    var _this = this;
    var projectIds = {}; // map of apiKey to projectId
    var _fetchProjectId = function (options) { return __awaiter(_this, void 0, void 0, function () {
        var apiKey, environment, fetch, _a, url, request, response, e_1, _b, json, e_2, _c, _d, _e, _f;
        var _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    apiKey = options.apiKey, environment = options.environment;
                    fetch = (0, utils_1.getFetch)(options);
                    _a = _buildWhoamiRequest(environment, apiKey), url = _a.url, request = _a.request;
                    _h.label = 1;
                case 1:
                    _h.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fetch(url, request)];
                case 2:
                    response = _h.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _h.sent();
                    // Expected fetch exceptions listed here https://developer.mozilla.org/en-US/docs/Web/API/fetch#exceptions
                    // Most are header-related and should never occur since we do not let the user set headers. A TypeError
                    // will occur if the connection fails due to invalid environment configuration provided by the user. This is
                    // different from server errors handled below because the client is unable to make contact with a Pinecone
                    // server at all without a valid environment value.
                    throw new errors_1.PineconeConnectionError(e_1, url);
                case 4:
                    if (!(response.status >= 400)) return [3 /*break*/, 6];
                    _b = errors_1.mapHttpStatusError;
                    _g = {
                        status: response.status,
                        url: url
                    };
                    return [4 /*yield*/, response.text()];
                case 5: throw _b.apply(void 0, [(_g.message = _h.sent(),
                        _g)]);
                case 6:
                    _h.trys.push([6, 8, , 10]);
                    return [4 /*yield*/, response.json()];
                case 7:
                    json = _h.sent();
                    return [3 /*break*/, 10];
                case 8:
                    e_2 = _h.sent();
                    _c = errors_1.PineconeUnexpectedResponseError.bind;
                    _d = [void 0, url,
                        response.status];
                    return [4 /*yield*/, response.text()];
                case 9: throw new (_c.apply(errors_1.PineconeUnexpectedResponseError, _d.concat([_h.sent(), 'The HTTP call succeeded but the response could not be parsed as JSON.'])))();
                case 10:
                    if (!!json.project_name) return [3 /*break*/, 12];
                    _e = errors_1.PineconeUnexpectedResponseError.bind;
                    _f = [void 0, url,
                        response.status];
                    return [4 /*yield*/, response.text()];
                case 11: throw new (_e.apply(errors_1.PineconeUnexpectedResponseError, _f.concat([_h.sent(), 'The HTTP call succeeded but response did not contain expected project_name.'])))();
                case 12: return [2 /*return*/, json.project_name];
            }
        });
    }); };
    /** @hidden */
    var _buildWhoamiRequest = function (environment, apiKey) {
        var url = "https://controller.".concat(environment, ".pinecone.io/actions/whoami");
        var request = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Api-Key': apiKey,
                'User-Agent': (0, utils_1.buildUserAgent)(false),
            },
        };
        return { url: url, request: request };
    };
    var key = function (config) { return "".concat(config.apiKey, ":").concat(config.environment); };
    return {
        getProjectId: function (config) {
            return __awaiter(this, void 0, void 0, function () {
                var cacheKey, projectId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cacheKey = key(config);
                            if (!(cacheKey in projectIds)) return [3 /*break*/, 1];
                            return [2 /*return*/, projectIds[cacheKey]];
                        case 1: return [4 /*yield*/, _fetchProjectId(config)];
                        case 2:
                            projectId = _a.sent();
                            projectIds[cacheKey] = projectId;
                            return [2 /*return*/, projectId];
                    }
                });
            });
        },
        _reset: function () {
            for (var _i = 0, _a = Object.keys(projectIds); _i < _a.length; _i++) {
                var key_1 = _a[_i];
                delete projectIds[key_1];
            }
        },
        _set: function (config, projectId) {
            var cacheKey = key(config);
            projectIds[cacheKey] = projectId;
        },
    };
})();
//# sourceMappingURL=projectIdSingleton.js.map